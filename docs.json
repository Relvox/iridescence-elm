[{"name":"Controls.Tables","comment":" Module to create and manage tables in Elm.\n\n@docs TableData, viewTable\n\n","unions":[],"aliases":[{"name":"TableData","comment":" The TableData type alias represents the structure of a table with various attributes such as headers, rows, styles, etc.\n","args":["msg"],"type":"{ headers : List.List String.String, rows : List.List (List.List String.String), rowStyles : List.List (List.List (Html.Attribute msg)), extras : List.List (Html.Html msg), height : Basics.Int, scrollable : Basics.Bool }"}],"values":[{"name":"viewTable","comment":" Creates a table view with the specified table data attributes.\n","type":"Controls.Tables.TableData msg -> Html.Html msg"}],"binops":[]},{"name":"Utils.Common","comment":" A module providing utility functions for common operations.\n\nThis module contains functions that help with common operations such as finding distinct elements in a list, zipping two lists, etc.\n\n@docs distinct, distinctKey, zip\n\n","unions":[],"aliases":[],"values":[{"name":"distinct","comment":" Removes duplicate elements from a list. The elements in the list must be comparable.\n","type":"List.List comparable -> List.List comparable"},{"name":"distinctKey","comment":" Removes duplicate elements from a list based on a key extracted by the provided function.\nThe function `extractKey` is used to extract a key from each element, and only one element for each distinct key is retained in the output list.\n","type":"(a -> comparable) -> List.List a -> List.List a"},{"name":"zip","comment":" Zips two lists into a single list of pairs. If the lists have different lengths, the extra elements in the longer list are ignored.\n","type":"List.List a -> List.List b -> List.List ( a, b )"}],"binops":[]},{"name":"Utils.Dict","comment":" A module providing utility functions for working with dictionaries.\n\nThis module contains a function to retrieve values associated with a list of keys from a dictionary.\n\n@docs keyedValues\n\n","unions":[],"aliases":[],"values":[{"name":"keyedValues","comment":" Retrieves the values associated with a list of keys from a dictionary.\nIf a key does not exist in the dictionary, it is ignored.\n","type":"List.List comparable -> Dict.Dict comparable v -> List.List v"}],"binops":[]},{"name":"Utils.Http","comment":" A module providing utility functions for handling HTTP requests and responses.\n\nThis module contains types and functions to help handle HTTP results in a more convenient way, including a custom error model and a function to handle results of HTTP requests.\n\n@docs ErrorModel, handleResult\n\n","unions":[],"aliases":[{"name":"ErrorModel","comment":" The ErrorModel type alias extends a model with an error field to handle HTTP errors.\n","args":["m"],"type":"{ m | error : Maybe.Maybe String.String }"}],"values":[{"name":"handleResult","comment":" Handles the result of an HTTP request.\nIf the result is Ok, it updates the model using the provided updater function.\nIf the result is an error, it updates the error field in the model with the error message.\n","type":"Result.Result Http.Error a -> Utils.Http.ErrorModel m -> (a -> Utils.Http.ErrorModel m) -> Utils.Http.ErrorModel m"}],"binops":[]},{"name":"Utils.Matrix","comment":" Module to perform operations on matrices.\n\n@docs transpose\n\n","unions":[],"aliases":[],"values":[{"name":"transpose","comment":" Transposes a matrix represented as a list of lists.\nIf the input matrix is empty or contains empty rows, the function returns an empty list.\n","type":"List.List (List.List a) -> List.List (List.List a)"}],"binops":[]}]